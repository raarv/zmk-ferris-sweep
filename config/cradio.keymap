// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        sht: special_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            lazy;
            ignore-modifiers;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        settings {
            bindings = <&mo 4>;
            key-positions = <30 31>;
        };

        numpad {
            bindings = <&tog 5>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W           &kp E             &kp R               &kp T        &kp Y                 &kp U               &kp I             &kp O           &kp P
&ht LEFT_ALT A  &ht LEFT_GUI S  &ht LEFT_SHIFT D  &ht LEFT_CONTROL F  &kp G        &kp H                 &ht LEFT_CONTROL J  &ht LEFT_SHIFT K  &ht LEFT_GUI L  &ht LEFT_ALT SEMI
&kp Z           &kp X           &kp C             &kp V               &kp B        &kp N                 &kp M               &kp COMMA         &kp DOT         &kp SLASH
                                                  &lt 1 TAB           &lt 6 ESC    &ht LEFT_SHIFT SPACE  &lt 2 BSPC
            >;
        };

        left_layer {
            bindings = <
&kp F1        &kp F2        &kp F3  &kp F4  &kp F5    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp N1        &kp N2        &kp N3  &kp N4  &kp N5    &kp N6   &kp N7   &kp N8  &kp N9  &kp N0
&kp C_VOL_DN  &kp C_VOL_UP  &none   &none   &none     &kp F11  &kp F12  &none   &none   &none
                                    &trans  &none     &none    &trans
            >;
        };

        right_layer {
            bindings = <
&kp EXCL   &kp AT     &kp HASH  &kp DOLLAR  &none      &none    &kp PERCENT  &kp CARET  &kp AMPS   &kp ASTRK
&kp PLUS   &kp LBRC   &kp LBKT  &kp LPAR    &kp SQT    &kp DQT  &kp RPAR     &kp RBKT   &kp RBRC   &kp ENTER
&kp EQUAL  &kp GRAVE  &kp BSLH  &kp MINUS   &none      &none    &kp UNDER    &kp PIPE   &kp TILDE  &kp SEMICOLON
                                &trans      &none      &none    &trans
            >;
        };

        tri_layer {
            bindings = <
&none      &none      &none       &none       &none             &kp PRINTSCREEN  &none      &none      &none      &none
&skq LALT  &skq LGUI  &skq LSHFT  &skq LCTRL  &skq RIGHT_ALT    &none            &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
&none      &none      &none       &none       &none             &kp LC(Z)        &kp LC(X)  &kp LC(C)  &kp LC(V)  &none
                                  &trans      &none             &none            &trans
            >;
        };

        settings {
            bindings = <
&bootloader  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 3  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &trans      &bt BT_SEL 1    &bt BT_SEL 4  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans      &bt BT_SEL 2    &trans        &trans  &trans  &trans  &trans
                             &trans      &trans          &trans        &trans
            >;
        };

        numpad {
            bindings = <
&none             &trans           &none              &none                  &none         &kp ASTERISK  &kp N7         &kp N8  &kp N9  &kp MINUS
&kp LESS_THAN     &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp COMMA     &kp SLASH     &kp N4         &kp N5  &kp N6  &kp PLUS
&kp GREATER_THAN  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp PERIOD    &kp N0        &kp N1         &kp N2  &kp N3  &kp EQUAL
                                                      &none                  &none         &kp RET       &kp BACKSPACE
            >;
        };

        dwm_navigator {
            bindings = <
&kp LG(LS(N1))          &kp LG(LS(N2))     &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))    &kp LS(LG(N6))  &kp LS(LG(N7))  &kp LS(LG(N8))  &kp LS(LG(N9))  &kp LS(LG(N0))
&kp LG(N1)              &kp LG(N2)         &kp LG(N3)      &kp LG(N4)      &kp LG(N5)        &kp LG(N6)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &kp LG(N0)
&kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &trans          &trans          &trans            &trans          &trans          &trans          &trans          &trans
                                                           &trans          &trans            &trans          &trans
            >;
        };
    };
};
